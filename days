#! /usr/bin/env python
# -*- coding: utf-8 ; mode: python -*-
# © Copyright 2010–13 Roland Sieker <ospalh@gmail.com>
# License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html

from decimal import Decimal
import math
import os
import sys
import time

__version__ = '1.3.0'

year = 365.2421897

if sys.platform.startswith("win32"):
    # Chicken out. use ASCII on windows.
    day_format_separators = {-1: '.', -3: "'", -4: "'", -6: "'"}
else:
    day_format_separators = {-1: u'.', -3: u"’", -4: u"’", -6: u"’"}


def omag(x):
    """Return the order of magnitude of a number."""
    try:
        return int(math.floor(math.log10(abs(x))))
    except ValueError:
        return 0


def age_seconds(file_name):
    """Return the age of a file in seconds."""
    #return int(time.time() - os.stat(file).st_ctime)
    return time.time() - os.stat(file_name).st_mtime


def age_days_formated(file_name, sigfig=3, maybe_years=True):
    """
    Return the age of a file in days.

    Returns the age of a file in days as a string, formated by
    days_formated.
    """
    return days_formated(age_seconds(file_name) / 86400.0, sigfig, maybe_years)


def days_formated(days, sigfig=3, maybe_years=True):
    """
    Return a value formated in a specific way.

    Returns a string that represents the number of days given as an
    argument formated in a specific way that should make parsing the
    decimal part of the age easier for humans.
    """
    # Calculate how many digits to show. Show full precision of days,
    # limited for shorter times.
    show_digits = max(sigfig - omag(days) - 1, 0)
    out_string = ''
    if 0 == show_digits:
        out_string = str(int(round(days, 0)))
    else:
        decimal_days = Decimal(
            str(days)).quantize(Decimal('0.' + '0' * (show_digits - 1) + '1'))
        dec_sign, dec_digits, dec_exponent = decimal_days.as_tuple()
        ndig = len(dec_digits)
        if dec_sign:
            out_string = '-'
        for pad in range(0, dec_exponent + ndig - 1, -1):
            try:
                out_string += day_format_separators[pad]
            except KeyError:
                pass
            out_string += '0'
        for ex, dg in enumerate(dec_digits):
            # Add a decorator if it is the right position
            try:
                out_string += day_format_separators[
                    -ex + dec_exponent + ndig - 1]
            except KeyError:
                pass
            out_string += str(dg)
    if days > year and maybe_years:
        out_string += " ({0:.1f} years)".format(days / year)
    return out_string


if __name__ == '__main__':
    helpmsg = """Usage: days FILE [FILE2 ... [FILE_N]]
Prints the age of FILE in days, using a non-standard formating of the days.
"""
    if len(sys.argv) < 2:
        print helpmsg
        sys.exit(0)
    if len(sys.argv) == 2:
        try:
            print(age_days_formated(sys.argv[1]))
        except OSError as ose:
            sys.stderr.write(str(ose) + '\n')
    if len(sys.argv) > 2:
        for fl in sys.argv[1:]:
            flu = unicode(fl, sys.getfilesystemencoding())
            try:
                print(unicode.ljust(flu + u': ', 20) + age_days_formated(fl))
            except OSError as ose:
                sys.stderr.write(str(ose) + '\n')
